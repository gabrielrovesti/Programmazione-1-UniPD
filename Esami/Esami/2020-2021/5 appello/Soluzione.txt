int trovaV(int* X, int lim1, int lim2, int lim3, int nele, int val, int num){	
	int min=0;	bool fpund=false;	int occurr=0;
	
	int str_pieni=nele/(lim2*lim3);
	int ult_strato=nele%(lim2*lim3);
	int rig_r=ult_strato/lim3;
	
	for(int i=0; i<lim1*lim2*lim3 && !found; i++){
		for(int VF=0; VF<nele(str_pieni*rig_r) && !found; VF++){
			if(occurr == num)	found=true;
			if(*X(VF*lim2*cut_slice(lim1,lim2,lim3,i)==val) {occurr++; min=*X(VF*lim2*cut_slice(lim1,lim2,lim3,i);}
		}
	}
	return min;
}

int cut_slice(int lim1, int lim2, int lim3, int nele, int VF){
	if(nele <=0 || nele <lim3) return 0;
	return VF%lim2 * VF/lim2 * lim1*lim3;
}

int trovaV(int* X, int lim1, int lim2, int lim3, int nele, int val, int num, int occ, int i){	
	int min=0;
	
	int str_pieni=nele/(lim2*lim3);
	int ult_strato=nele%(lim2*lim3);
	int rig_r=ult_strato/lim3;
	
	if(i > lim1*lim2*lim3 || nele < lim3 || str_pieni==0) return 0;
	
		if(occurr == num)	found=true;
		if(i < rig_r*str_pieni){
			if(*X(VF*lim2*cut_slice(lim1,lim2,lim3,i)==val)
			return trova(X, lim1, lim2, lim3, nele, val, num, occ+1, i+1);
			else
			return trova(X, lim1, lim2, lim3, nele, val, num, occ, i);
		}
		return found;
}

int cut_slice(int lim1, int lim2, int lim3, int nele, int VF){
	if(nele <=0 || nele <lim3) return 0;
	return VF%lim2 * VF/lim2 * lim1*lim3;
}

/*
Si cerca di considerare V-fette piene, nei limiti del possibile,
su quello che di solito vuole il professore.

Realizzato in entrambi i modi;
vediamo infatti come si consideri un array solamente pieno
e definito e per entrambi i problemi si scorre l'array
scorrendo sempre per la dimensione che non usiamo (in questo caso lim2 essendo v-fette
e quindi colonne) nel modo sopra e stando attento ai limiti;
per il resto è un pattern matching.

Per la correttezza, si identifichino i limiti detti come casi base:
-meno strati del previsto, righe/colonne non del tutto piene --> 0
-definito e mi chiedo scansionando se possa essere l'elemento dereferenziato dell'array
--se esiste, aumento le occorrenze e 
---se le occorrenze sono minori di val, mi limito a continuare a scorrere
---altrimenti fermo iterazione/ricorsione e ritorno il valore dato

La fetta e il match esisterà in corrispondenza di uno e dell'altro, 
a seconda del valore dato. 
*/