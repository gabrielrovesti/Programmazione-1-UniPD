Scrivere una funzione iterativa bool F(int m, int* Y, int n, bool*R) che restituisca true se e solo se esiste una soluzione per m in Y e in questo caso R deve essere la rappresentazione della soluzione trovata. Se invece non ci sono soluzioni per m in Y,allora F deve restituire false (e valori qualsiasi  in R)

a) Scrivere la PRE e POST della funzione F;
b) realizzare la funzione F assumendo di avere a disposizione la funzione bool add_one(bool *R, int n) che soddisfa la seguente coppia di PRE e POST. 
PRE=(n >0 e R[0..n-1] è definito, e chiamiamo VAL(R)  il valore rappresentato da R[0..n-1] interpretato come numero binario (con true=1 e false=0)); vedi esempio più sotto.
POST=(se VAL(R)+1 è rappresentabile come binario con n bit (cioè VAL(R)+1 < 2n) allora add_one restituisce false e modifica R in modo che rappresenti in binario VAL(R)+1, se invece VAL(R)+1 non è rappresentabile con n bit, allora add_one restituisce true)

Esempio: sia n=3 e R=[true, false, false], allora VAL(R)=4. Se invochiamo add_one con questo R e n=3, la funzione deve restituire false e R=[true,false,true] il cui VAL è 4+1. Se invece n=3 e R=[true,true,true], VAL(R)= 7 e visto che  7+1 non è rappresentabile con 3 bit, add_one deve restituire true (e qualsiasi valore per R). Intuitivamente, il valore booleano restituito da add_one ci dice se sommando 1 ad R causiamo overflow (true) oppure no (false).

Quindi se ho 100 è 4 in binario. In poche parole, controllo se ha senso in binario, altrimenti me ne esco.

bool add_one(bool *R, int n){
	int i=0;	bool isbinary=true;
	while(i<n){
		if(R[i]==1 && R[n-1] == 0){
			R[i]=0;
			R[n-1]=1;
			isbinary=false;
		}
		else{
		R[n-1]=0;
		}
	}
	return isbinary;
}

//PRE=R array di booleani da riempire, r>0, n >0, Y array di interi definiti
bool F(int m, int* Y, int n, bool* R){
	bool go_out=false;	int sum=0;
	for(int i=0, j=0; i<n && j<n && !go_out; i++){
		if(sum == m)	go_out=true,
		sum+=Y[i];
		R[j]=add_one(R[j], i);
	}
	return go_out;
}
//POST=ritorno un booleano sse Y è soluzione per m in R
